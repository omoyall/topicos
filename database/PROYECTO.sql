CREATE TABLE ADMINISTRADORES(
    IDE NUMBER NOT NULL,
    USUARIO VARCHAR2(50) NOT NULL,
    CLAVE VARCHAR2(100) NOT NULL,
    CONSTRAINT PK_ADMINISTRADORES PRIMARY KEY(IDE)
);

CREATE TABLE CLIENTE(
    RUT VARCHAR2(20) NOT NULL,
    NOMBRE VARCHAR2(50) NOT NULL,
    APELLIDO VARCHAR2(50) NOT NULL,
    DIRECCION VARCHAR2(100),
    TELEFONO VARCHAR2(12),
    NUM_COMPRAS INTEGER CHECK(NUM_COMPRAS >= 0),
    CONSTRAINT PK_CLIENTE PRIMARY KEY(RUT)
);

CREATE TABLE PRODUCTO(
    CODIGO VARCHAR2(100) NOT NULL,
    NOMBRE VARCHAR2(500) NOT NULL,
    CATEGORIA VARCHAR2(100) NOT NULL,
    STOCK NUMBER,
    STOCK_MIN NUMBER,
    PRECIO NUMBER,
    IMAGEN VARCHAR2(10),
    CONSTRAINT PK_PRODUCTO PRIMARY KEY (CODIGO)
);

CREATE TABLE VENTA(
    COD_VENTA VARCHAR2(100) NOT NULL,
    FECHA DATE,
    CLIENTE VARCHAR2(50) NOT NULL,
    TOTAL_NETO NUMBER,
    IMPUESTO NUMBER,
    TOTAL NUMBER,
    CONSTRAINT PK_VENTA PRIMARY KEY(COD_VENTA),
    CONSTRAINT FK_VENTA_CLIENTE FOREIGN KEY(CLIENTE) REFERENCES CLIENTE(RUT) ON DELETE CASCADE
);

CREATE TABLE DETALLE_VENTA(
    COD_VENTA VARCHAR2(100) NOT NULL,
    NUM_LINEA INTEGER,
    PRODUCTO VARCHAR2(100),
    CANTIDAD NUMBER,
    PRECIO_UNIT NUMBER,
    TOTAL_LINEA NUMBER,
    CONSTRAINT PK_DETALLE PRIMARY KEY(COD_VENTA, NUM_LINEA),
    CONSTRAINT FK_DETALLE_PRODUCTO FOREIGN KEY(PRODUCTO) REFERENCES PRODUCTO(CODIGO) ON DELETE CASCADE,
    CONSTRAINT FK_DETALLE_VENTA FOREIGN KEY(COD_VENTA) REFERENCES VENTA(COD_VENTA) ON DELETE CASCADE
);

INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (1, 'HAMBURGESA DOBLE', 'HAMBURGESA', 1000, 10, 4000, '1.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (2, 'HAMBURGESA DE TOCINO', 'HAMBURGESA', 1000, 10, 3000, '2.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (3, 'HAMBURGESA REY', 'HAMBURGESA', 1000, 10, 4000, '3.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (4, 'HAMBURGESA NEGRA', 'HAMBURGESA', 1000, 10, 4000, '4.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (5, 'HAMBURGESA DE POLLO', 'HAMBURGESA', 1000, 10, 3000, '5.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (6, 'HAMBURGESA DELUXE', 'HAMBURGESA', 1000, 10, 5000, '6.jpg');

INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (7, 'PAPAS FRITAS', 'ACOMPAÑAMIENTO', 1000, 10, 2000, '7.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (8, 'PAPAS FRITAS XL', 'ACOMPAÑAMIENTO', 1000, 10, 3000, '8.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (9, 'ROLLITOS DE PRIMAVERA', 'ACOMPAÑAMIENTO', 1000, 10, 3000, '9.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (10, 'PALITOS DE QUESO', 'ACOMPAÑAMIENTO', 1000, 10, 4000, '10.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (11, 'NUGGETS', 'ACOMPAÑAMIENTO', 1000, 10, 3000, '11.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (12, 'ARITOS DE CEBOLLA', 'ACOMPAÑAMIENTO', 1000, 10, 2000, '12.jpg');

INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (13, 'COCA-COLA', 'BEBIDA', 1000, 10, 1500, '13.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (14, 'FANTA', 'BEBIDA', 1000, 10, 1500, '14.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (15, 'JUGO DE NARANJA Y LIMON', 'BEBIDA', 1000, 10, 1500, '15.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (16, 'CERVEZA', 'BEBIDA', 1000, 10, 2000, '16.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (17, 'JUGO FRUTOS ROJOS', 'BEBIDA', 1000, 10, 2000, '17.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (18, 'WHISKY', 'BEBIDA', 1000, 10, 3000, '18.jpg');

INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (19, 'TARTA DE LIMON', 'POSTRE', 1000, 10, 3000, '19.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (20, 'CHEESECAKE DE FRAMBUESA', 'POSTRE', 1000, 10, 3000, '20.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (21, 'VOLCAN DE CHOCOLATE', 'POSTRE', 1000, 10, 4000, '21.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (22, 'BROWNIE DE CHOCOLATE', 'POSTRE', 1000, 10, 4500, '22.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (23, 'PIE DE MANZANA', 'POSTRE', 1000, 10, 4000, '23.jpg');
INSERT INTO PRODUCTO(CODIGO, NOMBRE, CATEGORIA, STOCK, STOCK_MIN, PRECIO, IMAGEN) VALUES (24, 'SUNDAE CHOCOLATE', 'POSTRE', 1000, 10, 3000, '24.jpg');

INSERT INTO ADMINISTRADORES(IDE, USUARIO, CLAVE) VALUES (1,'OMOYA', 'pbkdf2:sha256:150000$Uf8yPaUj$826931b2405fadf569bbe5ac8a71e88375224b64f6be63102cd4feac220622fb');
INSERT INTO ADMINISTRADORES(IDE, USUARIO, CLAVE) VALUES (2,'AXEL', 'pbkdf2:sha256:150000$Uf8yPaUj$826931b2405fadf569bbe5ac8a71e88375224b64f6be63102cd4feac220622fb');
INSERT INTO ADMINISTRADORES(IDE, USUARIO, CLAVE) VALUES (3,'CAMILO', 'pbkdf2:sha256:150000$Uf8yPaUj$826931b2405fadf569bbe5ac8a71e88375224b64f6be63102cd4feac220622fb');
INSERT INTO ADMINISTRADORES(IDE, USUARIO, CLAVE) VALUES (4,'MIGUEL', 'pbkdf2:sha256:150000$Uf8yPaUj$826931b2405fadf569bbe5ac8a71e88375224b64f6be63102cd4feac220622fb');

CREATE OR REPLACE FUNCTION VALIDACION(RUT IN VARCHAR2)
RETURN BOOLEAN IS
BEGIN
RETURN REGEXP_LIKE(RUT, '^\d{1,3}(\.\d{3}){2}-(\d|k|K)$');
END VALIDACION;

CREATE OR REPLACE PROCEDURE INGRESAR_CLIENTE(X_RUT IN CLIENTE.RUT%TYPE,
                                            X_NOMBRE IN CLIENTE.NOMBRE%TYPE,
                                            X_APELLIDO IN CLIENTE.APELLIDO%TYPE,
                                            X_DIRECCION IN CLIENTE.DIRECCION%TYPE,
                                            X_TELEFONO IN CLIENTE.TELEFONO%TYPE)
AS
    CONTADOR NUMBER;
    RUT_INVALIDO EXCEPTION;
BEGIN
    IF VALIDACION(X_RUT) = TRUE THEN
        SELECT COUNT(*) INTO CONTADOR FROM CLIENTE WHERE RUT = X_RUT;
        LOCK TABLE CLIENTE IN ROW EXCLUSIVE MODE;
        IF(CONTADOR=0) THEN
            INSERT INTO CLIENTE(RUT, NOMBRE, APELLIDO, DIRECCION, TELEFONO, NUM_COMPRAS) 
            VALUES (X_RUT, X_NOMBRE, X_APELLIDO, X_DIRECCION, X_TELEFONO, 1);

        ELSE
            UPDATE CLIENTE SET NUM_COMPRAS = NUM_COMPRAS+1 WHERE RUT = X_RUT;
        END IF;
    ELSE
        RAISE RUT_INVALIDO;
    END IF;
EXCEPTION
    WHEN RUT_INVALIDO THEN RAISE_APPLICATION_ERROR(-20001, 'RUT INVALIDO');
END INGRESAR_CLIENTE;

CREATE SEQUENCE codi_venta INCREMENT BY 1;


CREATE OR REPLACE PROCEDURE VENDER(X_CLIENTE IN CLIENTE.RUT%TYPE,
                                    X_TOTAL_NETO IN VENTA.TOTAL_NETO%TYPE,
                                    X_IMPUESTO IN VENTA.IMPUESTO%TYPE,
                                    X_TOTAL IN VENTA.TOTAL%TYPE)
AS
    CONTADOR NUMBER;
    CLIENTE_NO_REGISTRADO EXCEPTION;
BEGIN
    
    SELECT COUNT(*) INTO CONTADOR FROM CLIENTE WHERE RUT = X_CLIENTE;
    IF (CONTADOR=1) THEN 
        LOCK TABLE VENTA IN ROW EXCLUSIVE MODE;
        LOCK TABLE DETALLE_VENTA IN ROW EXCLUSIVE MODE;
        INSERT INTO VENTA(COD_VENTA, FECHA, CLIENTE, TOTAL_NETO, IMPUESTO, TOTAL) 
        VALUES (codi_venta.NEXTVAL, SYSDATE, X_CLIENTE, X_TOTAL_NETO, X_IMPUESTO ,X_TOTAL);
    ELSE
        RAISE CLIENTE_NO_REGISTRADO;
    END IF;
EXCEPTION
     WHEN CLIENTE_NO_REGISTRADO THEN RAISE_APPLICATION_ERROR(-20002, 'CLIENTE NO REGISTRADO.');
END VENDER;

CREATE OR REPLACE PROCEDURE VENDER_DETALLE(N_LINEA IN NUMBER,
                                        X_PRODUCTO IN DETALLE_VENTA.PRODUCTO%TYPE,
                                        X_CANTIDAD IN DETALLE_VENTA.CANTIDAD%TYPE,
                                        X_PRECIO_UNIT IN DETALLE_VENTA.PRECIO_UNIT%TYPE,
                                        X_TOTAL_LINEA IN DETALLE_VENTA.TOTAL_LINEA%TYPE)
AS
    CONTADOR NUMBER;
    STK NUMBER;
    PRODUCTO_INCORRECTO EXCEPTION;
    PRODUCTO_SIN_STOCK EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO CONTADOR FROM PRODUCTO WHERE CODIGO = X_PRODUCTO;
    IF(CONTADOR=1) THEN
        SELECT STOCK INTO STK FROM PRODUCTO WHERE CODIGO = X_PRODUCTO;
        IF (STK > X_CANTIDAD) THEN 
            LOCK TABLE DETALLE_VENTA IN ROW EXCLUSIVE MODE;
            lOCK TABLE PRODUCTO IN ROW EXCLUSIVE MODE;
            INSERT INTO DETALLE_VENTA(COD_VENTA, NUM_LINEA, PRODUCTO, CANTIDAD, PRECIO_UNIT, TOTAL_LINEA) 
            VALUES (codi_venta.CURRVAL, N_LINEA, X_PRODUCTO, X_CANTIDAD, X_PRECIO_UNIT, X_TOTAL_LINEA);
        ELSE
            RAISE PRODUCTO_SIN_STOCK;
        END IF;
    ELSE
         RAISE PRODUCTO_INCORRECTO;
    END IF;
EXCEPTION
     WHEN PRODUCTO_INCORRECTO THEN RAISE_APPLICATION_ERROR(-20003, 'PRODUCTO INCORRECTO');
     WHEN PRODUCTO_SIN_STOCK THEN RAISE_APPLICATION_ERROR(-20004, 'SIN STOCK DEL PRODUCTO');
END VENDER_DETALLE;


CREATE OR REPLACE TRIGGER DESCONTAR_STOCK
AFTER INSERT ON DETALLE_VENTA
FOR EACH ROW
BEGIN
    UPDATE PRODUCTO SET STOCK=STOCK - :NEW.CANTIDAD WHERE CODIGO=:NEW.PRODUCTO;
END;

CREATE OR REPLACE TRIGGER FORMATEAR_CLIENTE
BEFORE INSERT OR UPDATE ON CLIENTE
FOR EACH ROW
BEGIN
    :NEW.NOMBRE := UPPER(:NEW.NOMBRE);
    :NEW.APELLIDO := UPPER(:NEW.APELLIDO);
    :NEW.DIRECCION := UPPER(:NEW.DIRECCION);
    IF(LENGTH(:NEW.TELEFONO) = 8) THEN
        :NEW.TELEFONO := '+569' || :NEW.TELEFONO;
    ELSIF (LENGTH(:NEW.TELEFONO) = 9) THEN
        :NEW.TELEFONO := '+56' || :NEW.TELEFONO;
    ELSIF (LENGTH(:NEW.TELEFONO) = 10) THEN
        :NEW.TELEFONO := '+569' || SUBSTR(:NEW.TELEFONO,3);
    ELSIF (LENGTH(:NEW.TELEFONO) = 11) THEN
        :NEW.TELEFONO := '+569' || SUBSTR(:NEW.TELEFONO,4);
    ELSIF (LENGTH(:NEW.TELEFONO) = 12) THEN
        :NEW.TELEFONO := '+569' || SUBSTR(:NEW.TELEFONO,5);
    END IF;
END;


CREATE OR REPLACE PROCEDURE AGREGAR_STOCK(X_CODIGO IN PRODUCTO.CODIGO%TYPE,
                                        X_CANTIDAD IN PRODUCTO.STOCK%TYPE)
AS
    X NUMBER;
    Y NUMBER;
BEGIN
    SELECT STOCK, STOCK_MIN INTO X, Y FROM PRODUCTO WHERE PRODUCTO.CODIGO = X_CODIGO;
    IF(X <= Y) THEN
        lOCK TABLE PRODUCTO IN ROW EXCLUSIVE MODE;
        UPDATE PRODUCTO SET STOCK = STOCK + X_CANTIDAD WHERE PRODUCTO.CODIGO = X_CODIGO;
    END IF;
END;



CREATE OR REPLACE VIEW REPORTE
(COD_VENTA, NUM_LINEA, CANTIDAD_PRODUCTOS_VENDIDO, TOTAL,
IMPUESTO, TOTAL_FINAL, NOMBRE_PRODUCTO, CATEGORIA_PRODUCTO,
FECHA_VENTA, RUT_CLIENTE, NOMBRE_CLIENTE, APELLIDO_CLIENTE)
AS 
SELECT DETALLE_VENTA.COD_VENTA, 
       DETALLE_VENTA.NUM_LINEA,
       DETALLE_VENTA.CANTIDAD,
       DETALLE_VENTA.TOTAL_LINEA,
       (DETALLE_VENTA.TOTAL_LINEA * 0.19) IMPUESTO,
       (DETALLE_VENTA.TOTAL_LINEA * (1 + 0.19)) TOTAL_FINAL, 
       PRODUCTO.NOMBRE,
       PRODUCTO.CATEGORIA,
       TO_CHAR(VENTA.FECHA, 'DD/MM/YYYY'),
       VENTA.CLIENTE,
       CLIENTE.NOMBRE,
       CLIENTE.APELLIDO
FROM DETALLE_VENTA
INNER JOIN PRODUCTO
ON DETALLE_VENTA.PRODUCTO = PRODUCTO.CODIGO
INNER JOIN VENTA
ON DETALLE_VENTA.COD_VENTA = VENTA.COD_VENTA
INNER JOIN CLIENTE
ON VENTA.CLIENTE = CLIENTE.RUT;

COMMIT;


/* ---------------------- */

SELECT * FROM DETALLE_VENTA;
SELECT * FROM VENTA;
SELECT * FROM PRODUCTO;
SELECT * FROM CLIENTE;
SELECT * FROM REPORTE;

delete cliente;
delete producto;

DROP TABLE PRODUCTO;
DROP TABLE DETALLE_VENTA;
DROP TABLE VENTA;
DROP TABLE CLIENTE;
DROP TABLE ADMINISTRADORES;
DROP SEQUENCE codi_venta;
DROP SEQUENCE cod_pedido;
DROP FUNCTION VALIDACION;